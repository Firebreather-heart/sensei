"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { Code2, Plus, Users, Clock, Globe, Lock, ArrowRight, LogOut, Copy } from "lucide-react"
import { DashboardLayout } from "@/components/dashboard-layout"
import { useSpaces } from "@/contexts/SpaceContext"
import { toast } from "@/components/ui/use-toast"

interface User {
    id: string
    username: string
    email: string
    role: string
}

export default function SpacesPage() {
    const router = useRouter()
    const { 
        activeSpaces, 
        currentSpace, 
        currentUser, 
        loading, 
        error,
        createSpace, 
        joinSpace, 
        leaveSpace 
    } = useSpaces()

    const [user, setUser] = useState<User | null>(null)
    const [showCreateDialog, setShowCreateDialog] = useState(false)
    const [showJoinDialog, setShowJoinDialog] = useState(false)
    const [newSpaceName, setNewSpaceName] = useState("")
    const [isPublic, setIsPublic] = useState(false)
    const [joinCode, setJoinCode] = useState("")
    const [creating, setCreating] = useState(false)
    const [joining, setJoining] = useState(false)

    useEffect(() => {
        const token = localStorage.getItem("token")
        if (!token) {
            router.push("/login")
            return
        }

        fetchUserData()
    }, [router])

    const fetchUserData = async () => {
        try {
            const token = localStorage.getItem("token")
            const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || "https://sensei-2keb.onrender.com"}/api/v1/auth/me`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })

            if (response.ok) {
                const userData = await response.json()
                setUser(userData)
            } else {
                router.push("/login")
            }
        } catch (error) {
            console.error("Failed to fetch user data:", error)
            router.push("/login")
        }
    }

    const handleCreateSpace = async () => {
        if (!newSpaceName.trim()) return

        setCreating(true)
        try {
            const space = await createSpace(newSpaceName, isPublic)
            toast({
                title: "Space created",
                description: `Space "${space.name}" created successfully!`,
            })
            setShowCreateDialog(false)
            setNewSpaceName("")
            setIsPublic(false)
            
            // Navigate to the space
            router.push(`/dashboard/spaces/${space.id}`)
        } catch (error) {
            toast({
                title: "Error",
                description: "Failed to create space. Please try again.",
                variant: "destructive",
            })
        } finally {
            setCreating(false)
        }
    }

    const handleJoinSpace = async () => {
        if (!joinCode.trim()) return

        setJoining(true)
        try {
            const success = await joinSpace(joinCode.toUpperCase())
            if (success) {
                toast({
                    title: "Joined space",
                    description: "Successfully joined the space!",
                })
                setShowJoinDialog(false)
                setJoinCode("")
                
                // Navigate to the space
                const space = activeSpaces.find(s => s.joinCode === joinCode.toUpperCase())
                if (space) {
                    router.push(`/dashboard/spaces/${space.id}`)
                }
            } else {
                toast({
                    title: "Error",
                    description: error || "Failed to join space. Please check the code and try again.",
                    variant: "destructive",
                })
            }
        } catch (error) {
            toast({
                title: "Error",
                description: "Failed to join space. Please try again.",
                variant: "destructive",
            })
        } finally {
            setJoining(false)
        }
    }

    const handleLeaveSpace = () => {
        leaveSpace()
        toast({
            title: "Left space",
            description: "You have left the space.",
        })
    }

    const copyJoinCode = (code: string) => {
        navigator.clipboard.writeText(code)
        toast({
            title: "Copied",
            description: "Join code copied to clipboard!",
        })
    }

    const formatRelativeTime = (timestamp: number) => {
        const seconds = Math.floor((Date.now() - timestamp) / 1000)

        let interval = Math.floor(seconds / 31536000)
        if (interval >= 1) return `${interval} year${interval === 1 ? '' : 's'} ago`

        interval = Math.floor(seconds / 2592000)
        if (interval >= 1) return `${interval} month${interval === 1 ? '' : 's'} ago`

        interval = Math.floor(seconds / 86400)
        if (interval >= 1) return `${interval} day${interval === 1 ? '' : 's'} ago`

        interval = Math.floor(seconds / 3600)
        if (interval >= 1) return `${interval} hour${interval === 1 ? '' : 's'} ago`

        interval = Math.floor(seconds / 60)
        if (interval >= 1) return `${interval} minute${interval === 1 ? '' : 's'} ago`

        return `${Math.floor(seconds)} second${seconds === 1 ? '' : 's'} ago`
    }

    if (loading) {
        return (
            <DashboardLayout user={user}>
                <div className="flex items-center justify-center h-64">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                </div>
            </DashboardLayout>
        )
    }

    return (
        <DashboardLayout user={user}>
            <div className="space-y-6">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                    <div>
                        <h1 className="text-3xl font-bold">Code Spaces</h1>
                        <p className="text-gray-600 dark:text-gray-400">
                            Collaborate on code in real-time with other developers
                        </p>
                    </div>
                    <div className="flex gap-2">
                        <Button onClick={() => setShowJoinDialog(true)} variant="outline">
                            Join Space
                        </Button>
                        <Button onClick={() => setShowCreateDialog(true)}>
                            <Plus className="h-4 w-4 mr-2" />
                            Create Space
                        </Button>
                    </div>
                </div>

                {/* Current Space Section */}
                {currentSpace && (
                    <Card className="border-blue-200 bg-blue-50 dark:bg-blue-950 dark:border-blue-800">
                        <CardHeader>
                            <div className="flex items-center justify-between">
                                <div>
                                    <CardTitle className="flex items-center gap-2">
                                        <Code2 className="h-5 w-5" />
                                        {currentSpace.name}
                                        <Badge variant="secondary">Current</Badge>
                                    </CardTitle>
                                    <CardDescription className="flex items-center gap-4 mt-2">
                                        <span className="flex items-center gap-1">
                                            <Users className="h-4 w-4" />
                                            {currentSpace.users.length} member{currentSpace.users.length !== 1 ? 's' : ''}
                                        </span>
                                        <span className="flex items-center gap-1">
                                            {currentSpace.isPublic ? (
                                                <>
                                                    <Globe className="h-4 w-4" />
                                                    Public
                                                </>
                                            ) : (
                                                <>
                                                    <Lock className="h-4 w-4" />
                                                    Private
                                                </>
                                            )}
                                        </span>
                                        <span className="flex items-center gap-1">
                                            <Clock className="h-4 w-4" />
                                            Active {formatRelativeTime(currentSpace.lastActivity)}
                                        </span>
                                    </CardDescription>
                                </div>
                                <div className="flex gap-2">
                                    <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => copyJoinCode(currentSpace.joinCode)}
                                    >
                                        <Copy className="h-4 w-4 mr-1" />
                                        {currentSpace.joinCode}
                                    </Button>
                                    <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => router.push(`/dashboard/spaces/${currentSpace.id}`)}
                                    >
                                        <ArrowRight className="h-4 w-4 mr-1" />
                                        Enter
                                    </Button>
                                    <Button
                                        variant="destructive"
                                        size="sm"
                                        onClick={handleLeaveSpace}
                                    >
                                        <LogOut className="h-4 w-4 mr-1" />
                                        Leave
                                    </Button>
                                </div>
                            </div>
                        </CardHeader>
                    </Card>
                )}

                {/* Active Spaces Section */}
                <div>
                    <h2 className="text-xl font-semibold mb-4">
                        Active Spaces ({activeSpaces.length})
                    </h2>
                    
                    {activeSpaces.length === 0 ? (
                        <Card>
                            <CardContent className="py-12 text-center">
                                <Code2 className="h-16 w-16 mx-auto opacity-20 mb-4" />
                                <h3 className="text-xl font-medium mb-2">No Active Spaces</h3>
                                <p className="text-gray-500 mb-6">
                                    There are no active spaces right now. Create one or join an existing space to get started.
                                </p>
                                <div className="flex gap-2 justify-center">
                                    <Button onClick={() => setShowCreateDialog(true)}>
                                        <Plus className="h-4 w-4 mr-2" />
                                        Create Space
                                    </Button>
                                    <Button onClick={() => setShowJoinDialog(true)} variant="outline">
                                        Join Space
                                    </Button>
                                </div>
                            </CardContent>
                        </Card>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            {activeSpaces.map((space) => (
                                <Card 
                                    key={space.id} 
                                    className={`hover:shadow-lg transition-shadow cursor-pointer ${
                                        currentSpace?.id === space.id ? 'ring-2 ring-blue-500' : ''
                                    }`}
                                    onClick={() => router.push(`/dashboard/spaces/${space.id}`)}
                                >
                                    <CardHeader className="pb-3">
                                        <CardTitle className="flex items-center justify-between">
                                            <span className="truncate">{space.name}</span>
                                            {space.isPublic ? (
                                                <Globe className="h-4 w-4 text-green-500" />
                                            ) : (
                                                <Lock className="h-4 w-4 text-gray-500" />
                                            )}
                                        </CardTitle>
                                        <CardDescription>
                                            Created by {space.creatorName}
                                        </CardDescription>
                                    </CardHeader>
                                    <CardContent className="pt-0">
                                        <div className="flex items-center gap-4 text-sm text-gray-600">
                                            <span className="flex items-center gap-1">
                                                <Users className="h-4 w-4" />
                                                {space.users.length}
                                            </span>
                                            <span className="flex items-center gap-1">
                                                <Clock className="h-4 w-4" />
                                                {formatRelativeTime(space.lastActivity)}
                                            </span>
                                        </div>
                                        <div className="mt-2">
                                            <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={(e) => {
                                                    e.stopPropagation()
                                                    copyJoinCode(space.joinCode)
                                                }}
                                                className="text-xs"
                                            >
                                                <Copy className="h-3 w-3 mr-1" />
                                                {space.joinCode}
                                            </Button>
                                        </div>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                    )}
                </div>

                {/* Create Space Dialog */}
                <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
                    <DialogContent>
                        <DialogHeader>
                            <DialogTitle>Create New Space</DialogTitle>
                            <DialogDescription>
                                Create a collaborative coding space for real-time development
                            </DialogDescription>
                        </DialogHeader>
                        <div className="grid gap-4 py-4">
                            <div className="grid gap-2">
                                <Label htmlFor="space-name">Space Name</Label>
                                <Input
                                    id="space-name"
                                    placeholder="My Awesome Project"
                                    value={newSpaceName}
                                    onChange={(e) => setNewSpaceName(e.target.value)}
                                />
                            </div>
                            <div className="flex items-center space-x-2">
                                <Switch
                                    id="public-space"
                                    checked={isPublic}
                                    onCheckedChange={setIsPublic}
                                />
                                <Label htmlFor="public-space">Make this space public</Label>
                            </div>
                        </div>
                        <DialogFooter>
                            <Button variant="outline" onClick={() => setShowCreateDialog(false)}>
                                Cancel
                            </Button>
                            <Button onClick={handleCreateSpace} disabled={!newSpaceName.trim() || creating}>
                                {creating ? "Creating..." : "Create Space"}
                            </Button>
                        </DialogFooter>
                    </DialogContent>
                </Dialog>

                {/* Join Space Dialog */}
                <Dialog open={showJoinDialog} onOpenChange={setShowJoinDialog}>
                    <DialogContent>
                        <DialogHeader>
                            <DialogTitle>Join Space</DialogTitle>
                            <DialogDescription>
                                Enter a join code to collaborate in an existing space
                            </DialogDescription>
                        </DialogHeader>
                        <div className="grid gap-4 py-4">
                            <div className="grid gap-2">
                                <Label htmlFor="join-code">Join Code</Label>
                                <Input
                                    id="join-code"
                                    placeholder="ABC123"
                                    value={joinCode}
                                    onChange={(e) => setJoinCode(e.target.value.toUpperCase())}
                                    className="uppercase"
                                />
                            </div>
                        </div>
                        <DialogFooter>
                            <Button variant="outline" onClick={() => setShowJoinDialog(false)}>
                                Cancel
                            </Button>
                            <Button onClick={handleJoinSpace} disabled={!joinCode.trim() || joining}>
                                {joining ? "Joining..." : "Join Space"}
                            </Button>
                        </DialogFooter>
                    </DialogContent>
                </Dialog>
            </div>
        </DashboardLayout>
    )
}
