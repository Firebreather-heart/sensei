"use client";

import React, { createContext, useContext, useState, useEffect } from "react";
import { v4 as uuidv4 } from "uuid";
import { CodeSpace, SpaceUser, ChatMessage, EditRequest } from "@/types/spaces";
import { VirtualFile } from "@/types";

// Define the context shape
interface SpaceContextType {
  activeSpaces: CodeSpace[];           // List of all currently active spaces
  currentSpace: CodeSpace | null;      // The space the user is currently in
  currentUser: SpaceUser | null;       // Current user info
  loading: boolean;
  error: string | null;
  
  // Core space operations
  createSpace: (name: string, isPublic: boolean) => Promise<CodeSpace>;
  joinSpace: (joinCode: string) => Promise<boolean>;
  joinSpaceByCode: (joinCode: string) => Promise<boolean>;
  leaveSpace: () => void;
  
  // Communication
  sendMessage: (message: string) => void;
  
  // File operations
  setActiveFile: (file: VirtualFile) => void;
  
  // Edit permissions
  requestEditPermission: () => Promise<boolean>;
  grantEditPermission: (userId: string) => Promise<boolean>;
  denyEditPermission: (userId: string) => Promise<boolean>;
  
  // File saving (Y.js integration)
  yDoc: any;
  provider: any;
  saveFile: () => Promise<boolean>;
}

// Create the context
const SpaceContext = createContext<SpaceContextType | undefined>(undefined);

// In-memory storage for active spaces (shared across all users)
let globalActiveSpaces: CodeSpace[] = [];

// Session storage key for current user's space session
const SESSION_STORAGE_KEY = "sensei_current_space_session";

// Create a mock current user
const createCurrentUser = (): SpaceUser => {
  // Try to get from sessionStorage first for refresh persistence
  const storedSession = sessionStorage.getItem(SESSION_STORAGE_KEY);
  if (storedSession) {
    try {
      const session = JSON.parse(storedSession);
      return {
        id: session.userId,
        username: session.username,
        isCreator: false,
        canEdit: false,
        isActive: true,
        lastActivity: Date.now(),
      };
    } catch (e) {
      console.error("Failed to parse stored session", e);
    }
  }

  // Generate a new user
  const id = uuidv4();
  const username = `User_${id.substring(0, 5)}`;

  return {
    id,
    username,
    isCreator: false,
    canEdit: false,
    isActive: true,
    lastActivity: Date.now(),
  };
};

// Helper to remove empty spaces
const cleanupEmptySpaces = () => {
  globalActiveSpaces = globalActiveSpaces.filter(space => space.users.length > 0);
};

// Provider component
export const SpaceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [activeSpaces, setActiveSpaces] = useState<CodeSpace[]>([]);
  const [currentSpace, setCurrentSpace] = useState<CodeSpace | null>(null);
  const [currentUser, setCurrentUser] = useState<SpaceUser | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [yDoc, setYDoc] = useState<any>(null);
  const [provider, setProvider] = useState<any>(null);

  // Initialize state
  useEffect(() => {
    const user = createCurrentUser();
    setCurrentUser(user);
    
    // Check if user was in a space before refresh
    const storedSession = sessionStorage.getItem(SESSION_STORAGE_KEY);
    if (storedSession) {
      try {
        const session = JSON.parse(storedSession);
        // Try to rejoin the space
        const space = globalActiveSpaces.find(s => s.joinCode === session.spaceCode);
        if (space && space.users.some(u => u.id === user.id)) {
          setCurrentSpace(space);
          // Update user as active in the space
          updateUserInSpace(space.joinCode, user.id, { isActive: true, lastActivity: Date.now() });
        } else {
          // Clear invalid session
          sessionStorage.removeItem(SESSION_STORAGE_KEY);
        }
      } catch (e) {
        console.error("Failed to restore session", e);
        sessionStorage.removeItem(SESSION_STORAGE_KEY);
      }
    }
    
    setActiveSpaces([...globalActiveSpaces]);
    setLoading(false);
  }, []);

  // Sync global spaces to local state periodically
  useEffect(() => {
    const interval = setInterval(() => {
      cleanupEmptySpaces();
      setActiveSpaces([...globalActiveSpaces]);
      
      // Check if current space still exists
      if (currentSpace && !globalActiveSpaces.find(s => s.id === currentSpace.id)) {
        setCurrentSpace(null);
        sessionStorage.removeItem(SESSION_STORAGE_KEY);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [currentSpace]);

  // Helper to update a user in a space
  const updateUserInSpace = (joinCode: string, userId: string, updates: Partial<SpaceUser>) => {
    const spaceIndex = globalActiveSpaces.findIndex(s => s.joinCode === joinCode);
    if (spaceIndex >= 0) {
      const space = globalActiveSpaces[spaceIndex];
      const userIndex = space.users.findIndex(u => u.id === userId);
      if (userIndex >= 0) {
        space.users[userIndex] = { ...space.users[userIndex], ...updates };
        space.lastActivity = Date.now();
        
        // Update current space if it's the same
        if (currentSpace?.id === space.id) {
          setCurrentSpace({ ...space });
        }
      }
    }
  };

  // Create a new space
  const createSpace = async (name: string, isPublic: boolean): Promise<CodeSpace> => {
    if (!currentUser) throw new Error("No current user");
    
    setError(null);
    
    // Leave current space if in one
    if (currentSpace) {
      leaveSpace();
    }

    const newSpace: CodeSpace = {
      id: uuidv4(),
      name,
      joinCode: Math.random().toString(36).substring(2, 8).toUpperCase(),
      createdAt: Date.now(),
      creatorId: currentUser.id,
      creatorName: currentUser.username,
      users: [{
        id: currentUser.id,
        username: currentUser.username,
        isCreator: true,
        canEdit: true,
        isActive: true,
        lastActivity: Date.now()
      }],
      activeFile: null,
      messages: [],
      editRequests: [],
      isPublic,
      lastActivity: Date.now()
    };

    // Add to global spaces
    globalActiveSpaces.push(newSpace);
    setActiveSpaces([...globalActiveSpaces]);
    setCurrentSpace(newSpace);
    
    // Update current user
    setCurrentUser({
      ...currentUser,
      isCreator: true,
      canEdit: true,
    });

    // Store session
    sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify({
      userId: currentUser.id,
      username: currentUser.username,
      spaceCode: newSpace.joinCode
    }));

    return newSpace;
  };

  // Join a space by code
  const joinSpace = async (joinCode: string): Promise<boolean> => {
    if (!currentUser) {
      setError("No current user");
      return false;
    }
    
    setError(null);
    
    // Find space with the join code
    const space = globalActiveSpaces.find(s => s.joinCode === joinCode);
    if (!space) {
      setError("Space not found");
      return false;
    }

    // Leave current space if in one
    if (currentSpace) {
      leaveSpace();
    }

    // Check if user is already in the space
    const existingUser = space.users.find(u => u.id === currentUser.id);
    if (existingUser) {
      // Just rejoin
      updateUserInSpace(joinCode, currentUser.id, { isActive: true, lastActivity: Date.now() });
      setCurrentSpace(space);
      setCurrentUser({
        ...currentUser,
        isCreator: existingUser.isCreator,
        canEdit: existingUser.canEdit,
      });
    } else {
      // Add user to the space
      const newUser: SpaceUser = {
        id: currentUser.id,
        username: currentUser.username,
        isCreator: false,
        canEdit: false, // Start as viewer only
        isActive: true,
        lastActivity: Date.now()
      };

      space.users.push(newUser);
      space.lastActivity = Date.now();
      
      setCurrentSpace(space);
      setCurrentUser({
        ...currentUser,
        isCreator: false,
        canEdit: false,
      });
    }

    // Store session
    sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify({
      userId: currentUser.id,
      username: currentUser.username,
      spaceCode: joinCode
    }));

    return true;
  };

  // Alias for joinSpace
  const joinSpaceByCode = joinSpace;

  // Leave current space
  const leaveSpace = () => {
    if (!currentSpace || !currentUser) return;

    // Remove user from space
    const spaceIndex = globalActiveSpaces.findIndex(s => s.id === currentSpace.id);
    if (spaceIndex >= 0) {
      const space = globalActiveSpaces[spaceIndex];
      space.users = space.users.filter(u => u.id !== currentUser.id);
      
      // Remove space if empty
      if (space.users.length === 0) {
        globalActiveSpaces.splice(spaceIndex, 1);
      } else {
        space.lastActivity = Date.now();
      }
    }

    setCurrentSpace(null);
    setCurrentUser({
      ...currentUser,
      isCreator: false,
      canEdit: false,
    });

    // Clear session
    sessionStorage.removeItem(SESSION_STORAGE_KEY);
    
    // Update active spaces
    setActiveSpaces([...globalActiveSpaces]);
  };

  // Send a chat message
  const sendMessage = (message: string) => {
    if (!currentSpace || !currentUser) return;

    const newMessage: ChatMessage = {
      id: uuidv4(),
      userId: currentUser.id,
      username: currentUser.username,
      message,
      timestamp: Date.now()
    };

    const spaceIndex = globalActiveSpaces.findIndex(s => s.id === currentSpace.id);
    if (spaceIndex >= 0) {
      globalActiveSpaces[spaceIndex].messages.push(newMessage);
      globalActiveSpaces[spaceIndex].lastActivity = Date.now();
      
      setCurrentSpace({ ...globalActiveSpaces[spaceIndex] });
    }
  };

  // Set active file in current space
  const setActiveFile = (file: VirtualFile) => {
    if (!currentSpace) return;

    const spaceIndex = globalActiveSpaces.findIndex(s => s.id === currentSpace.id);
    if (spaceIndex >= 0) {
      globalActiveSpaces[spaceIndex].activeFile = file;
      globalActiveSpaces[spaceIndex].lastActivity = Date.now();
      
      setCurrentSpace({ ...globalActiveSpaces[spaceIndex] });
    }
  };

  // Request edit permission
  const requestEditPermission = async (): Promise<boolean> => {
    if (!currentSpace || !currentUser) return false;

    // Check if request already exists
    if (currentSpace.editRequests.some(r => r.userId === currentUser.id && r.pending)) {
      return false; // Don't create duplicate requests
    }

    const newRequest: EditRequest = {
      id: uuidv4(),
      userId: currentUser.id,
      username: currentUser.username,
      timestamp: Date.now(),
      pending: true
    };

    const spaceIndex = globalActiveSpaces.findIndex(s => s.id === currentSpace.id);
    if (spaceIndex >= 0) {
      globalActiveSpaces[spaceIndex].editRequests.push(newRequest);
      setCurrentSpace({ ...globalActiveSpaces[spaceIndex] });
      return true;
    }

    return false;
  };

  // Grant edit permission
  const grantEditPermission = async (userId: string): Promise<boolean> => {
    if (!currentSpace || !currentUser?.isCreator) return false;

    // Find the request
    const request = currentSpace.editRequests.find(r => r.userId === userId && r.pending);
    if (!request) return false;

    const spaceIndex = globalActiveSpaces.findIndex(s => s.id === currentSpace.id);
    if (spaceIndex >= 0) {
      const space = globalActiveSpaces[spaceIndex];
      
      // Update request status
      const requestIndex = space.editRequests.findIndex(r => r.id === request.id);
      if (requestIndex >= 0) {
        space.editRequests[requestIndex].pending = false;
      }
      
      // Update user permissions
      const userIndex = space.users.findIndex(u => u.id === userId);
      if (userIndex >= 0) {
        space.users[userIndex].canEdit = true;
      }
      
      space.lastActivity = Date.now();
      setCurrentSpace({ ...space });
      return true;
    }

    return false;
  };

  // Deny edit permission
  const denyEditPermission = async (userId: string): Promise<boolean> => {
    if (!currentSpace || !currentUser?.isCreator) return false;

    const request = currentSpace.editRequests.find(r => r.userId === userId && r.pending);
    if (!request) return false;

    const spaceIndex = globalActiveSpaces.findIndex(s => s.id === currentSpace.id);
    if (spaceIndex >= 0) {
      const space = globalActiveSpaces[spaceIndex];
      
      // Update request status
      const requestIndex = space.editRequests.findIndex(r => r.id === request.id);
      if (requestIndex >= 0) {
        space.editRequests[requestIndex].pending = false;
      }
      
      space.lastActivity = Date.now();
      setCurrentSpace({ ...space });
      return true;
    }

    return false;
  };

  // Save file (placeholder for Y.js integration)
  const saveFile = async (): Promise<boolean> => {
    if (!currentSpace || !currentUser?.canEdit) return false;
    
    // TODO: Implement actual file saving with Y.js
    console.log("Saving file...");
    return true;
  };

  const value = {
    activeSpaces,
    currentSpace,
    currentUser,
    loading,
    error,
    createSpace,
    joinSpace,
    joinSpaceByCode,
    leaveSpace,
    sendMessage,
    setActiveFile,
    requestEditPermission,
    grantEditPermission,
    denyEditPermission,
    yDoc,
    provider,
    saveFile
  };

  return (
    <SpaceContext.Provider value={value}>
      {children}
    </SpaceContext.Provider>
  );
};

// Custom hook for using the context
export const useSpaces = () => {
  const context = useContext(SpaceContext);
  if (!context) {
    throw new Error('useSpaces must be used within a SpaceProvider');
  }
  return context;
};
